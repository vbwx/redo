#!/bin/bash

version="2.6"

set -eu
shopt -s nullglob
IFS=$'\n'

function traverse {
	local INDEX=0
	local COUNT=$#
	((DEPTH)) || RCOUNT=$#

	for DIR in "$@"; do
		((DEPTH)) || ((RINDEX++))
		((INDEX++))
		[[ $DIR != '/' ]] && DIR="${DIR%/}"
		if ! [[ -d $DIR ]]; then
			((quiet)) || echo "redo: ${CWD:+$CWD/}$DIR: no such directory" >&2
			continue
		fi
		[[ ! $follow && -L $DIR ]] && continue
		if ! [[ -x $DIR && -r $DIR ]]; then
			((quiet)) || echo "redo: ${CWD:+$CWD/}$DIR: permission denied" >&2
			continue
		fi

		if ((nocwd)); then
			if [[ ${indir-} ]]; then
				_dirs=()
				for e in "${indir[@]}"; do
					_dirs+=("$DIR"/$e)
				done
			else
				_dirs=("$DIR"/*/)
			fi
			exclude=()
			for e in "${exdir[@]}"; do
				exclude+=("$DIR"/$e)
			done
		else
			pushd -- "$DIR/" > /dev/null
			DIR="${DIR##*/}"
			_dirs=(${indir[@]:-*/})
			exclude=(${exdir[@]})
		fi
		((DEPTH++))
		dirs=()
		if ((DEPTH < maxdepth)); then
			for d in ${_dirs[@]+"${_dirs[@]}"}; do
				for e in "${exclude[@]}"; do
					[[ "$d" == "$e" ]] && continue 2
				done
				dirs+=("$d")
			done
		fi

		if ((DEPTH >= mindepth)); then
			if ((nocwd)); then
				d="$DIR/"
			else
				CWD="${PWD#$ROOT/}"
				d=''
			fi
			[[ ${dirs-} ]] && LEAF='' || LEAF=1
			FILES=0
			SUBDIRS=0
			for e in "$d"*; do
				[[ -d $e ]] && ((++SUBDIRS)) || ((++FILES))
			done

			((RUNS++))
			(shopt -u nullglob; eval "$cmd" ${argv[@]+"${argv[@]}"}) && err=0 || err=$?
			if ((err)); then
				((hush)) || echo "redo: ${CWD:-$DIR}: $cmd: error $err" >&2
				((strict)) && cleanup $err
			fi
		fi

		[[ ${dirs-} ]] && traverse "${dirs[@]}"
		((DEPTH--))
		((nocwd)) || popd > /dev/null
	done
	return 0
}

function cleanup {
	[[ -f ${script-} ]] && rm -f "$script"
	exit ${1-}
}

if [[ ${1-} == '--help' ]]; then
	cat <<-'EOF'
		usage: redo [--quiet] [--strict] [--follow] [--hidden] [--nocd]
		            [--mindepth N | +N] [--maxdepth N | -N] [--depth N | --N]
		            [--] [+INCLUDE_GLOB ...] [-EXCLUDE_GLOB ...]
		            [+] [DIR ...] [-] [SCRIPT_OR_EXECUTABLE [ARG ...]]

		variables: DIR, CWD, COUNT, INDEX, DEPTH, RUNS, FILES, SUBDIRS,
		           LEAF, ROOT, RCOUNT, RINDEX
	EOF
	exit
fi
if [[ ${1-} == '--version' ]]; then
	echo "$0 $version"
	echo "Copyright (c) 2017-2024 Bernhard Waldbrunner"
	exit
fi

indir=()
exdir=(./ ../)
dirs=()
argv=()
cmd=''
set=''
nocwd=''
strict=''
quiet=''
hush=''
follow=''
opt=1
glob=1
file=1
export COUNT RCOUNT INDEX RINDEX=0 DEPTH=0 RUNS=0 FILES SUBDIRS LEAF
export DIR CWD='' ROOT="$PWD"

for arg in "$@"; do
	if [[ $set ]]; then
		declare $set="$arg"
		set=''
		continue
	fi
	if ((opt)); then
		if [[ $arg == '--' ]]; then
			opt=''
			continue
		elif [[ $arg == '--nocwd' || $arg == '--nocd' ]]; then
			nocwd=1
			continue
		elif [[ $arg == '--follow' ]]; then
			follow=1
			continue
		elif [[ $arg == '--hidden' ]]; then
			shopt -s dotglob
			continue
		elif [[ $arg == '--depth' ]]; then
			set=depth
			continue
		elif [[ $arg == --depth=* ]]; then
			depth="${arg:8}"
			continue
		elif [[ $arg =~ ^--[1-9][0-9]*$ ]]; then
			depth="${arg:2}"
			continue
		elif [[ $arg == '--mindepth' ]]; then
			set=mindepth
			continue
		elif [[ $arg == --mindepth=* ]]; then
			mindepth="${arg:11}"
			continue
		elif [[ $arg =~ ^\+[1-9][0-9]*$ ]]; then
			mindepth="${arg:1}"
			continue
		elif [[ $arg == '--maxdepth' ]]; then
			set=maxdepth
			continue
		elif [[ $arg == --maxdepth=* ]]; then
			maxdepth="${arg:11}"
			continue
		elif [[ $arg =~ ^-[1-9][0-9]*$ ]]; then
			maxdepth="${arg:1}"
			continue
		elif [[ $arg == '--strict' ]]; then
			strict=1
			continue
		elif [[ $arg == '--quiet' ]]; then
			quiet=1
			hush=1
			continue
		elif [[ ${arg:0:2} == '--' ]]; then
			echo "redo: unrecognized option '${arg:2}'" >&2
			exit 2
		fi
	fi
	if ((glob)); then
		if [[ $arg == [-+] ]]; then
			glob=''
			opt=''
			[[ $arg == '-' ]] && file=''
			continue
		elif [[ ${arg:0:1} == '-' ]]; then
			[[ $arg == */ ]] || arg+=/
			exdir+=("${arg:1}")
			continue
		elif [[ ${arg:0:1} == '+' ]]; then
			[[ $arg == */ ]] || arg+=/
			indir+=("${arg:1}")
			continue
		fi
	fi
	if ((file)); then
		if [[ $arg == '-' ]]; then
			glob=''
			opt=''
			file=''
			continue
		elif [[ -d $arg ]]; then
			if [[ ! $follow && -L $arg ]]; then
				((quiet)) || echo "redo: $arg: symlink not followed" >&2
			else
				dirs+=("$arg")
			fi
			glob=''
			opt=''
			continue
		elif [[ -f $arg ]]; then
			if [[ -x $arg ]]; then
				cmd="\"$(realpath -- "$arg")\""
			else
				read -r line < "$arg"
				if [[ ${line:0:2} == '#!' ]]; then
					cmd="${line:2}"
				else
					cmd="$SHELL"
				fi
				argv=("\"$(realpath -- "$arg")\"")
			fi
			glob=''
			opt=''
			file=''
			continue
		fi
	fi
	if [[ $cmd ]]; then
		argv+=("$arg")
	else
		cmd="$arg"
		glob=''
		opt=''
		file=''
		hush=1
	fi
done

if [[ $set ]]; then
	echo "redo: option '$set' requires an argument" >&2
	exit 2
fi
for opt in depth mindepth maxdepth; do
	if [[ ${!opt+1} && ! ${!opt} =~ ^[0-9]+$ ]]; then
		echo "redo: option '$opt' requires a positive integer as argument" >&2
		exit 2
	fi
done
if [[ ${depth-} ]]; then
	mindepth=$depth
	maxdepth=$depth
else
	: ${mindepth:=0}
	: ${maxdepth:=999}
fi

((maxdepth < 1)) && exit 0

if [[ ! ${dirs-} ]]; then
	_dirs=(${indir[@]:-*/})
	for d in ${_dirs[@]+"${_dirs[@]}"}; do
		for e in ${exdir[@]}; do
			[[ "$d" == "$e" ]] && continue 2
		done
		dirs+=("$d")
	done
	[[ ${dirs-} ]] || exit 0
fi

if [[ $cmd ]]; then
	traverse "${dirs[@]}"
else
	script="$(mktemp --tmpdir redo.XXXXXXXXXX)"
	trap cleanup INT
	read -r line
	if [[ ${line:0:2} == '#!' ]]; then
		cmd="${line:2}"
	else
		cmd="$SHELL"
		printf "%s\n" "$line" > "$script"
	fi
	cat >> "$script"
	argv=("\"$script\"")
	hush=1
	traverse "${dirs[@]}"
	cleanup
fi
